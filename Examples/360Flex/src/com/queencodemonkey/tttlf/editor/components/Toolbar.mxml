<?xml version="1.0" encoding="utf-8"?>
<!--
 *******************************************************************************
 *
 *  Copyright (c) 2010 Huyen Tue Dao
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a
 *  copy of this software and associated documentation files (the "Software"),
 *  to deal in the Software without restriction, including without limitation
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense,
 *  and/or sell copies of the Software, and to permit persons to whom the
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 *  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 *  DEALINGS IN THE SOFTWARE.
 *
 *******************************************************************************
-->
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 xmlns:components="com.queencodemonkey.tttlf.editor.components.*"
		 width="100%" height="50">
	
	<fx:Metadata>
		[Event( name="formatChange",type="com.queencodemonkey.tttlf.editor.events.ToolbarEvent" )]
		[Event( name="applyBlockFormat",type="com.queencodemonkey.tttlf.editor.events.ToolbarEvent" )]
	</fx:Metadata>
	
	<fx:Script>
		<![CDATA[
			import com.queencodemonkey.tttlf.editor.events.ToolbarEvent;
			import com.queencodemonkey.tttlf.editor.skins.ColorListItemRenderer;
			
			import flash.text.engine.FontWeight;
			
			import flashx.textLayout.formats.ITextLayoutFormat;
			import flashx.textLayout.formats.TextAlign;
			import flashx.textLayout.formats.TextDecoration;
			import flashx.textLayout.formats.TextLayoutFormat;
			
			import spark.components.PopUpPosition;
			import spark.events.IndexChangeEvent;
			
			public function updateValues( format:ITextLayoutFormat ):void
			{
				setValue( format, "color" );
				setValue( format, "fontFamily" );
				setValue( format, "fontSize" );
				setValue( format, "fontStyle" );
				setValue( format, "fontWeight" );
				setValue( format, "textAlign" );
				setValue( format, "textDecoration" );
			}
			
			public function setValue( format:ITextLayoutFormat, formatProperty:String ):void
			{
				var value:* = format[ formatProperty ];
				if ( value )
				{
					switch( formatProperty )
					{
						case "color":
							colorMenu.selectedItem = value;
							break;
						case "fontFamily":
							fontFamilyComboBox.selectedItem = value;
							break;
						case "fontSize":
							fontSizeComboBox.selectedItem = value;
							break;
						case "fontStyle":
							italicButton.selected = value == FontStyle.ITALIC;
							break;
						case "fontWeight":
							boldButton.selected = value == FontWeight.BOLD;
							break;
						case "textAlign":
							textAlignComboBox.selectedItem = value;
							break;
						case "textDecoration":
							underlineButton.selected = value == TextDecoration.UNDERLINE;
							break;
						default:
							break;
						
					}
				}
			}
			
			private function colorButton_clickHandler(event:MouseEvent):void
			{
				colorPopUp.displayPopUp = colorButton.selected;
			}

			private function toggleButton_changeHandler(event:Event):void
			{
				var value:*;
				var toggleButton:FormatToolbarToggleButton = event.target as FormatToolbarToggleButton;
				switch ( toggleButton )
				{
					case boldButton:
						value = toggleButton.selected? FontWeight.BOLD : FontWeight.NORMAL;
						break;
					case italicButton:
						value = toggleButton.selected? FontStyle.ITALIC : FontStyle.REGULAR;
						break;
					case underlineButton:
						value = toggleButton.selected? TextDecoration.UNDERLINE : TextDecoration.NONE;
						break;
					default:
						value = null;
						break;
				}
				dispatchEvent( new ToolbarEvent( ToolbarEvent.FORMAT_CHANGE, toggleButton.formatProperty, value ) ); 
			}

			private function fontFamilyComboBox_changeHandler(event:IndexChangeEvent):void
			{
				dispatchEvent( new ToolbarEvent( ToolbarEvent.FORMAT_CHANGE, "fontFamily", fontFamilyComboBox.selectedItem ) );
			}

			private function fontSizeComboBox_changeHandler(event:IndexChangeEvent):void
			{
				dispatchEvent( new ToolbarEvent( ToolbarEvent.FORMAT_CHANGE, "fontSize", fontSizeComboBox.selectedItem ) ); 
			}

			private function colorMenu_changeHandler(event:IndexChangeEvent):void
			{
				dispatchEvent( new ToolbarEvent( ToolbarEvent.FORMAT_CHANGE, "color", colorMenu.selectedItem ) ); 
			}

			private function textAlignComboBox_changeHandler(event:IndexChangeEvent):void
			{
				dispatchEvent( new ToolbarEvent( ToolbarEvent.FORMAT_CHANGE, "textAlign", textAlignComboBox.selectedItem ) ); 
			}
			
			private function blockQuoteButton_clickHandler(event:MouseEvent):void
			{
				dispatchEvent( new ToolbarEvent( ToolbarEvent.BLOCK_QUOTE_FORMAT ) );
			}

		]]>
	</fx:Script>
	
	<s:Group id="controlsGroup"
			 width="100%" height="100%">
		
		<s:layout>
			<s:HorizontalLayout verticalAlign="middle" gap="15"
								paddingLeft="50"/>
		</s:layout>
		
		<s:ComboBox id="fontFamilyComboBox"
					width="140"
					requireSelection="true"
					change="fontFamilyComboBox_changeHandler(event)">
			<s:dataProvider>
				<s:ArrayList id="fontFamily">
					<fx:String>Helvetica</fx:String>
					<fx:String>Times New Roman</fx:String>
					<fx:String>Courier</fx:String>
					<fx:String>Impact</fx:String>
				</s:ArrayList>
			</s:dataProvider>
		</s:ComboBox>
		
		<s:ComboBox id="fontSizeComboBox"
					width="40"
					requireSelection="true"
					change="fontSizeComboBox_changeHandler(event)">
			<s:dataProvider>
				<s:ArrayList id="fontSize">
					<fx:int>10</fx:int>
					<fx:int>11</fx:int>
					<fx:int>12</fx:int>
					<fx:int>14</fx:int>
					<fx:int>18</fx:int>
					<fx:int>24</fx:int>
					<fx:int>36</fx:int>
				</s:ArrayList>
			</s:dataProvider>
		</s:ComboBox>
		
		<s:Group id="colorButtonGroup"
				 height="100%">
			
			<components:FormatToolbarToggleButton id="colorButton" label="color"
												  width="50"
												  verticalCenter="0"
												  click="colorButton_clickHandler(event)"/>
			
			<s:PopUpAnchor id="colorPopUp"
						   popUpPosition="{ PopUpPosition.BELOW }"
						   top="40">
				
				<s:List id="colorMenu"
						requireSelection="true"
						itemRenderer="com.queencodemonkey.tttlf.editor.skins.ColorListItemRenderer"
						skinClass="com.queencodemonkey.tttlf.editor.skins.ToolbarListSkin"
						change="colorMenu_changeHandler(event)">
					
					<s:layout>
						<s:TileLayout columnWidth="40" rowHeight="40"
									  requestedColumnCount="3"
									  horizontalGap="0" verticalGap="0"/>
					</s:layout>
					
					<s:dataProvider>
						<s:ArrayList id="color">
							<fx:uint>0xFA0E00</fx:uint>
							<fx:uint>0xFF8E00</fx:uint>
							<fx:uint>0xFEFF00</fx:uint>
							<fx:uint>0x009700</fx:uint>
							<fx:uint>0x0090FF</fx:uint>
							<fx:uint>0x080096</fx:uint>
							<fx:uint>0x9F0094</fx:uint>
							<fx:uint>0xFF00FF</fx:uint>
							<fx:uint>0x9F0000</fx:uint>
							<fx:uint>0x919191</fx:uint>
							<fx:uint>0xFFFFFF</fx:uint>
							<fx:uint>0x000000</fx:uint>
						</s:ArrayList>
					</s:dataProvider>
					
				</s:List>
				
				
			</s:PopUpAnchor>
			
		</s:Group>
		
		<components:FormatToolbarToggleButton id="boldButton" label="bold" formatProperty="fontWeight" width="50" change="toggleButton_changeHandler( event )"/>
		
		<components:FormatToolbarToggleButton id="italicButton" label="italic" formatProperty="fontStyle" width="50" change="toggleButton_changeHandler( event )"/>
		
		<components:FormatToolbarToggleButton id="underlineButton" label="underline" formatProperty="textDecoration" width="80" change="toggleButton_changeHandler( event )"/>
		
		<s:ComboBox id="textAlignComboBox"
					width="65"
					requireSelection="true"
					change="textAlignComboBox_changeHandler(event)">
			<s:dataProvider>
				<s:ArrayList id="textAlign">
					<fx:uint>{ TextAlign.LEFT }</fx:uint>
					<fx:uint>{ TextAlign.CENTER }</fx:uint>
					<fx:uint>{ TextAlign.RIGHT }</fx:uint>
				</s:ArrayList>
			</s:dataProvider>
		</s:ComboBox>
		
		<components:FormatToolbarButton id="blockQuoteButton" label="block quote" click="blockQuoteButton_clickHandler(event)"/>
		
	</s:Group>
	
</s:Group>
