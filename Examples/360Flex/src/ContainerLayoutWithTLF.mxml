<?xml version="1.0" encoding="utf-8"?>
<!--
 *******************************************************************************
 *
 *  Copyright (c) 2010 Huyen Tue Dao
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a
 *  copy of this software and associated documentation files (the "Software"),
 *  to deal in the Software without restriction, including without limitation
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense,
 *  and/or sell copies of the Software, and to permit persons to whom the
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 *  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 *  DEALINGS IN THE SOFTWARE.
 *
 *******************************************************************************
-->
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:layout="com.queencodemonkey.tttlf.components.layout.*"
			   creationComplete="creationCompleteHandler(event)">
	
	<fx:Style source="assets/css/global.css"/>
	
	<fx:Declarations>
		
		<fx:XML id="textFlow01" source="./assets/data/ContainerLayoutTextFlow01.xml"/>
		
		<fx:XML id="textFlow02" source="./assets/data/ContainerLayoutTextFlow02.xml"/>
		
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.queencodemonkey.tttlf.components.layout.ResizeableContainer;
			
			import flashx.textLayout.container.ContainerController;
			import flashx.textLayout.conversion.TextConverter;
			import flashx.textLayout.elements.TextFlow;
			
			import mx.events.FlexEvent;
			
			XML.ignoreWhitespace = false;
			
			public var singleTextFlow:TextFlow;
			public var linkedTextFlow:TextFlow;
			
			private function addContainer():void
			{
				var newContainer:ResizeableContainer = new ResizeableContainer();
				newContainer.width = 200;
				newContainer.height = 300;
				linkedContainer.addElement( newContainer );
				newContainer.x = ( linkedContainer.width >> 1 ) - ( newContainer.width >> 1 );
				newContainer.y = ( linkedContainer.height >> 1 ) - ( newContainer.height >> 1 );
				linkContainer( newContainer );
			}
			
			private function removeContainer():void
			{
				linkedTextFlow.flowComposer.removeControllerAt( linkedTextFlow.flowComposer.numControllers - 1 );
				linkedContainer.removeElementAt( linkedContainer.numElements - 1 );
				linkedTextFlow.flowComposer.updateAllControllers();
			}
			
			private function linkContainer( linkableContainer:ResizeableContainer ):void
			{
				var containerController:ContainerController = new ContainerController( linkableContainer.container, linkableContainer.container.width, linkableContainer.container.height );
				linkableContainer.containerController = containerController;
				linkedTextFlow.flowComposer.addController( containerController );
				linkedTextFlow.flowComposer.updateAllControllers();
			}
			
			private function creationCompleteHandler(event:FlexEvent):void
			{
				singleTextFlow = TextConverter.importToFlow( textFlow01, TextConverter.TEXT_LAYOUT_FORMAT );
				
				var containerController:ContainerController = new ContainerController( resizeableContainer.container, resizeableContainer.container.width, resizeableContainer.container.height );
				resizeableContainer.containerController = containerController;
				singleTextFlow.flowComposer.addController( containerController );
				singleTextFlow.flowComposer.updateAllControllers();
				
				linkedTextFlow = TextConverter.importToFlow( textFlow02, TextConverter.TEXT_LAYOUT_FORMAT );
				containerController = new ContainerController( linkedResizeableContainer.container, linkedResizeableContainer.container.width, linkedResizeableContainer.container.height );
				linkedResizeableContainer.containerController = containerController;
				linkedTextFlow.flowComposer.addController( containerController );
				linkedTextFlow.flowComposer.updateAllControllers();
			}
			
			private function addContainer_clickHandler(event:MouseEvent):void
			{
				addContainer();
			}
			
			
			private function removeContainer_clickHandler(event:MouseEvent):void
			{
				removeContainer();
			}
			
		]]>
	</fx:Script>
	
	<s:RichText top="25"
				left="25"
				height="50"
				text="Container Layout in TLF"
				styleName="title"/>
	
	<s:VGroup id="exampleGroup"
			  top="50" left="25" right="25"
			  height="100%"
			  gap="30"
			  paddingTop="35" paddingBottom="50">
		
		<s:Group id="resizeableGroup"
				 width="100%" height="500">
			
			<s:RichText
				top="25" x="{ exampleContainer.x }"
				text="Dynamically resizing TLF containers…"
				styleName="exampleGroupLabel"/>	
			
			<s:BorderContainer id="exampleContainer"
							   top="50" bottom="0"
							   width="100%"
							   styleName="exampleBorderContainer">
				
				<layout:ResizeableContainer id="resizeableContainer"
											width="200" height="300"
											x="50" y="50"/>
				
			</s:BorderContainer>
			
		</s:Group>
		
		<s:Group id="linkedGroup"
				 width="100%" height="500">
			
			<s:RichText
				top="25" x="{ linkedContainer.x }"
				text="Linking TLF containers…"
				styleName="exampleGroupLabel"/>
			
			<s:BorderContainer id="linkedContainer"
							   top="50" bottom="0"
							   width="100%"
							   styleName="exampleBorderContainer">
				
				<s:Group id="controls"
						 width="100%" height="50">
					
					<s:layout>
						<s:HorizontalLayout gap="20" verticalAlign="middle"
											paddingLeft="50"/>
					</s:layout>
					
					<s:Button id="addContainerButton"
							  label="Add Container"
							  click="addContainer_clickHandler(event)"/>
					
					<s:Button id="removeContainerButton"
							  label="Remove Container"
							  click="removeContainer_clickHandler(event)"/>
					
				</s:Group>
				
				<layout:ResizeableContainer id="linkedResizeableContainer"
											width="200" height="300"
											x="50" y="50"/>
				
			</s:BorderContainer>
			
		</s:Group>
		
	</s:VGroup>
	
</s:Application>