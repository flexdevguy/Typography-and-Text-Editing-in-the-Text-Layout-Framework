<?xml version="1.0" encoding="utf-8"?>
<!--
 *******************************************************************************
 *
 *  Copyright (c) 2010 Huyen Tue Dao
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a
 *  copy of this software and associated documentation files (the "Software"),
 *  to deal in the Software without restriction, including without limitation
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense,
 *  and/or sell copies of the Software, and to permit persons to whom the
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 *  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 *  DEALINGS IN THE SOFTWARE.
 *
 *******************************************************************************
-->
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   creationComplete="creationCompleteHandler(event)">

	<fx:Style source="assets/css/global.css"/>

	<fx:Declarations>

		<fx:XML id="textFlowXML01"
				source="./assets/data/manualTLFTextFlow01.xml"/>
		
		<fx:XML id="textFlowXML02"
				source="./assets/data/manualTLFTextFlow02.xml"/>
		
		<fx:XML id="textFlowXML03"
				source="./assets/data/manualTLFTextFlow03.xml"/>

	</fx:Declarations>

	<fx:Script>
		<![CDATA[
			import flashx.textLayout.container.ContainerController;
			import flashx.textLayout.conversion.TextConverter;
			import flashx.textLayout.elements.TextFlow;
			import flashx.textLayout.events.TextLayoutEvent;
			import flashx.textLayout.events.UpdateCompleteEvent;
			
			import mx.events.FlexEvent;
			
			import spark.events.IndexChangeEvent;

			XML.ignoreWhitespace = false;

			public var textFlow:TextFlow;

			public var containerController:ContainerController;

			private function setupTLF( data:XML ):void
			{
				textFlow = TextConverter.importToFlow( data, TextConverter.TEXT_LAYOUT_FORMAT );
				containerController = new ContainerController( tlfContainer, tlfContainer.width, tlfContainer.height );
				textFlow.flowComposer.addController( containerController );
				
				textFlow.addEventListener( UpdateCompleteEvent.UPDATE_COMPLETE, textFlow_updateCompleteHandler );
				textFlow.flowComposer.updateAllControllers();
			}

			private function resetContainer():void
			{
				while ( tlfContainer.numChildren > 0 )
				{
					tlfContainer.removeChildAt( 0 );
				}
			}

			private function addScrollbar():void
			{
				scrollbar.height = tlfContainer.height;

				var contentBounds:Rectangle = containerController.getContentBounds();
				scrollbar.maximum = contentBounds.height - tlfContainer.height;
				scrollbar.pageSize = tlfContainer.height;
				if ( scrollbar.maximum > 0 )
					scrollbar.visible = true;
				else
					scrollbar.visible = false;

				scrollbar.addEventListener( Event.CHANGE, scrollbar_changeHandler );
			}
			
			private function removeScrollbar():void
			{
				scrollbar.visible = false;
				scrollbar.removeEventListener( Event.CHANGE, scrollbar_changeHandler );
			}
			
			private function adjustScrollbar():void
			{
				if ( scrollbarEnabled.selected )
				{
					var contentBounds:Rectangle = containerController.getContentBounds();
					scrollbar.maximum = contentBounds.height - tlfContainer.height;
					scrollbar.pageSize = tlfContainer.height;
					scrollbar.visible = ( scrollbar.maximum > 0 );
				}
			}

			private function creationCompleteHandler( event:FlexEvent ):void
			{
				setupTLF( textFlowXML01 );
			}

			private function exampleComboBox_changeHandler( event:IndexChangeEvent ):void
			{
				textFlow.flowComposer.removeAllControllers();
				resetContainer();
				setupTLF( this[ exampleComboBox.selectedItem ]);
			}
			
			private function textFlow_updateCompleteHandler(event:UpdateCompleteEvent):void
			{
				adjustScrollbar();
			}
			
			private function scrollbar_changeHandler( event:Event ):void
			{
				containerController.verticalScrollPosition = scrollbar.value;
			}

			private function scrollbarEnabled_changeHandler( event:Event ):void
			{
				if ( scrollbarEnabled.selected )
				{
					addScrollbar();
				}
				else
				{
					removeScrollbar();
				}
			}
		]]>
	</fx:Script>

	<s:RichText top="25"
				left="25"
				height="50"
				text="Using TLF in Manual"
				styleName="title"/>

	<s:BorderContainer id="attributeExampleContainer"
					   top="100"
					   bottom="50"
					   left="25"
					   right="25"
					   width="100%"
					   styleName="exampleBorderContainer">

		<s:layout>
			<s:VerticalLayout gap="50"
							  paddingTop="40"
							  paddingBottom="40"
							  paddingLeft="50"
							  paddingRight="50"/>
		</s:layout>

		<s:Group width="100%"
				 height="100%">

			<s:layout>
				<s:HorizontalLayout verticalAlign="middle"/>
			</s:layout>

			<mx:UIComponent id="tlfContainer"
							width="100%"
							height="100%"/>

			<s:VScrollBar id="scrollbar"
						  visible="false"
						  height="100%"/>

		</s:Group>

		<s:Group id="exampleControls">

			<s:layout>
				<s:HorizontalLayout gap="5"
									verticalAlign="middle"/>
			</s:layout>

			<s:Label text="XML Data: "
					 paddingLeft="20"/>

			<s:ComboBox id="exampleComboBox"
						width="120"
						requireSelection="true"
						change="exampleComboBox_changeHandler(event)">

				<s:dataProvider>
					<s:ArrayList>
						<fx:String>textFlowXML01</fx:String>
						<fx:String>textFlowXML02</fx:String>
						<fx:String>textFlowXML03</fx:String>
					</s:ArrayList>
				</s:dataProvider>

			</s:ComboBox>

			<s:Label text="Scrollbar Enabled: "
					 paddingLeft="10"/>

			<s:CheckBox id="scrollbarEnabled"
						change="scrollbarEnabled_changeHandler(event)"/>

		</s:Group>

	</s:BorderContainer>

</s:Application>
