<?xml version="1.0" encoding="utf-8"?>
<!--
 *******************************************************************************
 *
 *  Copyright (c) 2010 Huyen Tue Dao
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a
 *  copy of this software and associated documentation files (the "Software"),
 *  to deal in the Software without restriction, including without limitation
 *  the rights to use, copy, modify, merge, publish, distribute, sublicense,
 *  and/or sell copies of the Software, and to permit persons to whom the
 *  Software is furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
 *  THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 *  FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 *  DEALINGS IN THE SOFTWARE.
 *
 *******************************************************************************
-->
<!--- Pagination example for TLF. -->
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx">
	
	<fx:Declarations>
		<fx:XML id="textFlowData" source="assets/data/hhga.xml"/>
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.queencodemonkey.tttlf.components.layout.Page;
			
			import flashx.textLayout.conversion.TextConverter;
			import flashx.textLayout.edit.EditManager;
			import flashx.textLayout.edit.SelectionManager;
			import flashx.textLayout.elements.TextFlow;
			import flashx.textLayout.events.UpdateCompleteEvent;
			import flashx.undo.UndoManager;
			
			// When importing data from XML objects, need to set this or
			// whitespace between elements may disappear.
			XML.ignoreWhitespace = false;
			
			/**
			 * @private
			 * Default page width.
			 */
			private static const PAGE_WIDTH:Number = 400;
			
			/**
			 * @private
			 * Default page height. 
			 */
			private static const PAGE_HEIGHT:Number = 540;
			
			/**
			 * @private
			 * TextFlow instance rendered in pages.
			 */
			private var textFlow:TextFlow = null;
			
			
			/**
			 * @private
			 * Edit manager for editable mode.
			 */
			private var editManager:EditManager = null;
			
			/**
			 * @private
			 * Previously insantiated page objects kept in pool until another
			 * one is needed.
			 */
			private var pagePool:Array = [];
			
			/**
			 * @private
			 * Creates a new page for rendering text.
			 * @return The created page.
			 */
			private function createPage():Page
			{
				var newPage:Page = new Page();
				newPage.width = PAGE_WIDTH;
				newPage.height = PAGE_HEIGHT;
				return newPage;
			}
			
			/**
			 * @private
			 * Adds a new page to the text rendering of the data. 
			 * @return The page added. 
			 */
			private function addPage():Page
			{
				var newPage:Page = pagePool.length == 0? createPage() : pagePool.pop();
				pageGroup.addElement( newPage );
				newPage.linkToTextFlow( textFlow );
				return newPage;
			}
			
			/**
			 * @private.
			 * Removes the last page from the text rendering.
			 */
			private function removePage():void
			{
				var pageToRemove:Page = pageGroup.getElementAt( pageGroup.numElements - 1 ) as Page;
				pageGroup.removeElement( pageToRemove );
				pageToRemove.unlinkFromTextFlow();
				pagePool.push( pageToRemove );
			}
			
			/**
			 * @private
			 * Removes all the pages from the text rendering. 
			 */
			private function removeAllPages():void
			{
				while ( pageGroup.numElements > 0 )
				{
					removePage();
				}
			}
			
			/**
			 * @private
			 * Loads the text data into pages.  Either one or all pages are
			 * loaded depending on whether the user has selected
			 * auto-pagination.
			 */
			private function loadButton_clickHandler( event:MouseEvent ):void
			{
				if ( textFlow )
				{
					textFlow.removeEventListener( UpdateCompleteEvent.UPDATE_COMPLETE, textFlow_updateCompleteHandler );
				}
				if ( pageGroup.numElements > 0 )
				{
					removeAllPages();
				}
				textFlow = TextConverter.importToFlow( textFlowData, TextConverter.TEXT_LAYOUT_FORMAT );
				if ( autoPaginateCheckBox.selected )
				{
					var page:Page = addPage();
					while ( !page.isLastPage() )
					{
						page = addPage();
					}
					textFlow.addEventListener( UpdateCompleteEvent.UPDATE_COMPLETE, textFlow_updateCompleteHandler );
				}
				else
				{
					addPage();
					addPageButton.enabled = true;
					removePageButton.enabled = true;
				}
				if ( editableCheckBox.selected )
				{
					if ( !editManager )
						editManager = new EditManager( new UndoManager );
					textFlow.interactionManager = editManager;
				}
				else
				{
					textFlow.interactionManager = null;
				}
				textFlow.flowComposer.updateAllControllers();
				loadButton.label = "Reload";
			}
			
			/**
			 * @private
			 * Resets the add/remove buttons when auto-pagination is turned
			 * on/off. 
			 */
			private function autoPaginateCheckBox_changeHandler(event:Event):void
			{
				if ( autoPaginateCheckBox.selected )
				{
					addPageButton.enabled = false;
					removePageButton.enabled = false;
					textFlow.addEventListener( UpdateCompleteEvent.UPDATE_COMPLETE, textFlow_updateCompleteHandler );
				}
				else
				{
					addPageButton.enabled = true;
					removePageButton.enabled = pageGroup.numElements > 0;
					textFlow.removeEventListener( UpdateCompleteEvent.UPDATE_COMPLETE, textFlow_updateCompleteHandler );
				}
			}

			/**
			 * @private 
			 * Adds a page when the "Add page" button is clicked.
			 */
			private function addPageButton_clickHandler(event:MouseEvent):void
			{
				addPage();
				removePageButton.enabled = true;
			}

			/**
			 * @private
			 * Removes a page when the "Remove page" button is clicked. 
			 */
			private function removePageButton_clickHandler(event:MouseEvent):void
			{
				removePage();
				if ( pageGroup.numElements == 0 )
				{
					removePageButton.enabled = false;
				}
			}

			/**
			 * @private
			 * Sets the text to be read-only/editable.
			 */
			private function editableCheckBox_changeHandler(event:Event):void
			{
				if ( textFlow )
				{
					if ( editableCheckBox.selected )
					{
						if ( !editManager )
							editManager = new EditManager( new UndoManager );
						textFlow.interactionManager = editManager;
					}
					else
					{
						textFlow.interactionManager = null;
					}
					textFlow.flowComposer.updateAllControllers();
				}
			}
			
			/**
			 * @private
			 * If auto-paginate is on, adds pages as appropriate or removes 
			 * excess pages.
			 */
			private function textFlow_updateCompleteHandler( event:UpdateCompleteEvent ):void
			{
				var page:Page = pageGroup.getElementAt( pageGroup.numElements - 1 ) as Page;
				while ( !page.isLastPage() && page.textLength > 0 )
				{
					page = addPage();
				}
				while ( page.textLength == 0 )
				{
					removePage();
					page = pageGroup.getElementAt( pageGroup.numElements - 1 ) as Page;
				}
			}

		]]>
	</fx:Script>
	
	<!--- Controls for turning auto-pagination on/off and adding/removing
	pages.-->
	<s:BorderContainer id="controlsContainer"
					   width="100%" height="100"
					   borderColor="0x999999" borderWeight="2">		
		<s:layout>
			<s:HorizontalLayout gap="12" verticalAlign="middle" paddingLeft="25"/>
		</s:layout>
		
		<s:RichText id="controlsLabel"
					text="Pagination with TLF"
					fontFamily="Minion Pro, Times New Roman, Times, serif" fontSize="36"/>
		
		<s:Rect width="2" height="60">
			<s:fill>
				<s:SolidColor color="0x999999"/>
			</s:fill>
		</s:Rect>
		
		<s:CheckBox id="autoPaginateCheckBox"
					label="Auto-paginate"
					selected="true"
					toolTip="Turn on/off auto-pagination."
					change="autoPaginateCheckBox_changeHandler( event )"/>
		
		<s:CheckBox id="editableCheckBox"
					label="Editable"
					selected="false"
					toolTip="Turn on/off editing."
					change="editableCheckBox_changeHandler( event )"/>
		
		<s:Button id="loadButton"
				  width="60"
				  label="Load"
				  toolTip="Render text data."
				  click="loadButton_clickHandler( event )"/>
		
		<s:Rect width="2" height="60">
			<s:fill>
				<s:SolidColor color="0xCCCCCC"/>
			</s:fill>
		</s:Rect>
		
		<s:Button id="addPageButton"
				  width="28"
				  label="+"
				  enabled="false"
				  toolTip="Add page."
				  click="addPageButton_clickHandler( event )"/>
		
		<s:Button id="removePageButton"
				  width="25"
				  label="-"
				  enabled="false"
				  toolTip="Remove page."
				  click="removePageButton_clickHandler( event )"/>
		
	</s:BorderContainer>
	
	<s:Rect top="100" bottom="0"
			width="100%">	
		<s:fill>
			<s:SolidColor color="0xCCCCCC"/>
		</s:fill>
		
	</s:Rect>
	
	<!--- Scrollable collection of pages rendering text content. -->
	<s:Scroller id="pageScroller"
				top="100" bottom="0" horizontalCenter="0"
				width="100%">
		
		<!--- Group of all pages rendering text content -->
		<s:Group id="pageGroup"
				 width="100%" height="100%" horizontalCenter="0">
			<s:layout>
				<s:VerticalLayout gap="20" horizontalAlign="center" paddingTop="50" paddingBottom="50"/>
			</s:layout>
		</s:Group>
		
	</s:Scroller>
	
</s:Application>